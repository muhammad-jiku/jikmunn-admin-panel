// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models
model Member {
  id           String        @id @default(uuid())
  memberId     String        @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  email        String        @unique
  contact      String        @unique
  gender       Gender
  provider     String?
  country      String?
  currency     String        @default("USD")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  accountsRel  Account[]
  transactions Transaction[]
  user         User?         @relation("MemberUser") // Define only the relation name here

  @@map("tblmember")
}

model Admin {
  id           String   @id @default(uuid())
  adminId      String   @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  email        String   @unique
  contact      String   @unique
  gender       Gender
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation("AdminUser") // Define only the relation name here

  @@map("tbladmin")
}

model Super_Admin {
  id           String   @id @default(uuid())
  superAdminId String   @unique
  firstName    String
  lastName     String
  middleName   String?
  profileImage String?
  email        String   @unique
  contact      String   @unique
  gender       Gender
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation("SuperAdminUser") // Define only the relation name here

  @@map("tblsuperadmin")
}

model User {
  id                  String       @id @default(uuid())
  userId              String       @unique
  role                UserRole
  password            String
  needsPasswordChange Boolean      @default(true)
  passwordChangedAt   DateTime?
  memberId            String?      @unique // Foreign key to Member
  member              Member?      @relation("MemberUser", fields: [memberId], references: [memberId]) // Define fields and references only on this side
  adminId             String?      @unique // Foreign key to Admin
  admin               Admin?       @relation("AdminUser", fields: [adminId], references: [adminId]) // Define fields and references only on this side
  superAdminId        String?      @unique // Foreign key to Super Admin
  superAdmin          Super_Admin? @relation("SuperAdminUser", fields: [superAdminId], references: [superAdminId]) // Define fields and references only on this side
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt

  // Composite index to enforce one role per user
  @@unique([memberId, adminId, superAdminId])
  @@map("tbluser")
}

// model User {
//   id                  Int           @id @default(autoincrement())
//   email               String        @unique
//   firstName           String
//   lastName            String?
//   contact             String?
//   accounts            String[]
//   password            String?
//   needsPasswordChange Boolean       @default(true)
//   passwordChangedAt   DateTime?
//   provider            String?
//   country             String?
//   currency            String        @default("USD")
//   createdAt           DateTime      @default(now())
//   updatedAt           DateTime      @updatedAt
//   accountsRel         Account[]
//   transactions        Transaction[]

//   @@map("tbluser")
// }

model Account {
  id             String   @id @default(uuid())
  memberId       String
  member         Member   @relation(fields: [memberId], references: [id])
  accountName    String
  accountNumber  String
  accountBalance Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("tblaccount")
}

model Transaction {
  id          String            @id @default(uuid())
  memberId    String
  member      Member            @relation(fields: [memberId], references: [id])
  description String
  status      TransactionStatus @default(PENDING) // Enum for status
  source      String
  amount      Float
  type        TransactionType   @default(INCOME) // Enum for type
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("tbltransaction")
}

// Enums
enum Gender {
  MALE
  FEMALE
}

enum UserRole {
  MEMBER
  ADMIN
  SUPER_ADMIN
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum Months {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}
